generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  bankAccount     String?
  reviewUrl       String?
  authProvider    String?          @map("auth_provider")
  createdAt       DateTime         @default(now())
  lastLogin       DateTime?        @map("last_login")
  LogEntry        LogEntry[]
  Subscription    Subscription[]
  teams           Team[]
  teamMemberships TeamMember?
  clients         Client[]
  services        Service[]
  isDeleted       Boolean @default(false)
  deletionScheduledAt DateTime? 
  stockAllowances StockAllowance[]
  ownedStocks     Stock[]          @relation("OwnedStocks")
  visits          Visit[]

  @@map("users")
}

model TeamMember {
  id               String  @id @default(uuid())
  teamId           String
  userId           String  @unique
  canAccessStocks  Boolean @default(false)
  canAccessClients Boolean @default(false)
  canAccessVisits  Boolean @default(false)
  team             Team    @relation(fields: [teamId], references: [id])
  user             User    @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
}

model Team {
  id             String           @id @default(uuid())
  name           String
  userId         String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  LogEntry       LogEntry[]
  user           User?            @relation(fields: [userId], references: [id])
  members        TeamMember[]
  clients        Client[]
  services       Service[]
  StockAllowance StockAllowance[]
  stocks         Stock[]
  visits         Visit[]

  @@index([userId], map: "Team_userId_fkey")
}

model VisitService {
  id        String  @id @default(uuid())
  visitId   String  @map("visit_id")
  serviceId String  @map("service_id")
  service   Service @relation(fields: [serviceId], references: [id])
  visit     Visit   @relation(fields: [visitId], references: [id])

  @@unique([visitId, serviceId])
  @@index([serviceId], map: "visit_services_service_id_fkey")
  @@map("visit_services")
}

model Photo {
  id          String   @id @default(uuid())
  visitId     String   @map("visit_id")
  url         String
  uploadedAt  DateTime @default(now()) @map("uploaded_at")
  description String?
  visit       Visit    @relation(fields: [visitId], references: [id])

  @@index([visitId], map: "photos_visit_id_fkey")
  @@map("photos")
}

model Procedure {
  id              String           @id @default(uuid())
  visitId         String           @map("visit_id")
  stepOrder       Int              @map("step_order")
  description     String?          @db.Text
  createdAt       DateTime         @default(now()) @map("created_at")
  visit           Visit            @relation(fields: [visitId], references: [id])
  stockAllowances StockAllowance[]

  @@index([visitId], map: "procedures_visit_id_fkey")
  @@map("procedures")
}

model LogEntry {
  id         String   @id @default(uuid())
  userId     String
  teamId     String
  action     String
  entityType String
  entityId   String?
  message    String
  metadata   Json?
  createdAt  DateTime @default(now())
  team       Team     @relation(fields: [teamId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([teamId], map: "LogEntry_teamId_fkey")
  @@index([userId], map: "LogEntry_userId_fkey")
}

model StockItem {
  id                  String           @id @default(uuid())
  itemName            String
  unit                String
  packageCount        Decimal          @db.Decimal(10, 2)
  quantity            Decimal          @db.Decimal(10, 2)
  lastPackageQuantity Decimal          @db.Decimal(15, 5)
  totalPrice          Decimal          @db.Decimal(15, 5)
  avgUnitPrice        Decimal          @db.Decimal(15, 5)
  threshold           Decimal          @db.Decimal(10, 2)
  isActive            Boolean          @default(true) @map("is_active")
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  stockId             String
  stockAllowances     StockAllowance[]
  stock               Stock            @relation(fields: [stockId], references: [id])
  activeName String? @db.VarChar(255) @map("active_itemName")

  @@index([stockId, activeName])
  @@map("stock_items")
}

model StockAllowance {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  teamId        String    @map("team_id")
  stockItemId   String    @map("stock_item_id")
  avgUnitPrice  Decimal   @default(0.00000) @db.Decimal(15, 5)
  stockItemName String?
  procedureId   String    @map("procedure_id")
  quantity      Decimal   @db.Decimal(10, 2)
  createdAt     DateTime  @default(now()) @map("created_at")
  procedure     Procedure @relation(fields: [procedureId], references: [id])
  stockItem     StockItem @relation(fields: [stockItemId], references: [id])
  team          Team      @relation(fields: [teamId], references: [id])
  user          User      @relation(fields: [userId], references: [id])

  @@index([procedureId], map: "stock_allowances_procedure_id_fkey")
  @@index([stockItemId], map: "stock_allowances_stock_item_id_fkey")
  @@index([teamId], map: "stock_allowances_team_id_fkey")
  @@index([userId], map: "stock_allowances_user_id_fkey")
  @@map("stock_allowances")
}

model Client {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  phone     String? @unique
  deposit   Boolean @default(true)
  note      String? @db.Text
  userId    String
  teamId    String
  team      Team    @relation(fields: [teamId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
  visits    Visit[]

  @@index([teamId], map: "clients_teamId_fkey")
  @@index([userId], map: "clients_userId_fkey")
  @@fulltext([firstName, lastName, phone])
  @@map("clients")
}

model Visit {
  id            String         @id @default(uuid())
  clientId      String
  userId        String
  date          DateTime
  note          String?
  deposit       Int?
  depositStatus DepositStatus? @default(NEZAPLACENO)
  visitStatus   Boolean?
  paidPrice     Decimal?       @db.Decimal(10, 2)
  teamId        String
  photos        Photo[]
  procedures    Procedure[]
  visitServices VisitService[]
  client        Client         @relation(fields: [clientId], references: [id])
  team          Team           @relation(fields: [teamId], references: [id])
  user          User           @relation(fields: [userId], references: [id])

  @@index([clientId], map: "visits_clientId_fkey")
  @@index([teamId], map: "visits_teamId_fkey")
  @@index([userId], map: "visits_userId_fkey")
  @@map("visits")
}

model Stock {
  id         String      @id @default(uuid())
  stockName  String
  createdAt  DateTime    @default(now())
  ownerId    String
  teamId     String?
  stockItems StockItem[]
  owner      User        @relation("OwnedStocks", fields: [ownerId], references: [id])
  team       Team?       @relation(fields: [teamId], references: [id])

  @@index([ownerId], map: "stocks_ownerId_fkey")
  @@index([teamId], map: "stocks_teamId_fkey")
  @@map("stocks")
}

model Service {
  id            String         @id @default(uuid())
  serviceName   String
  basePrice     Decimal        @db.Decimal(10, 2)
  userId        String
  teamId        String?
  team          Team?          @relation(fields: [teamId], references: [id])
  user          User           @relation(fields: [userId], references: [id])
  visitServices VisitService[]

  @@unique([userId, serviceName])
  @@index([teamId], map: "services_teamId_fkey")
  @@map("services")
}

model Subscription {
  id        String              @id @default(uuid())
  userId    String
  plan      String
  status    SubscriptionStatus? @default(PENDING)
  startDate DateTime            @default(now())
  endDate   DateTime?
  Payment   Payment[]
  user      User                @relation(fields: [userId], references: [id])

  @@index([userId], map: "Subscription_userId_fkey")
  @@unique([userId])
}

model Payment {
  id             String       @id @default(uuid())
  subscriptionId String
  refId          Int          @unique
  provider       String
  initRecurringId String       @default("")
  transactionId  String       @unique
  amount         Decimal      @db.Decimal(15, 5)
  currency       String       @default("CZK")
  status         PaymentStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  subscription   Subscription @relation(fields: [subscriptionId], references: [id])
  invoices  Invoice[]
  
  @@index([subscriptionId], map: "Payment_subscriptionId_fkey")
}

enum DepositStatus {
  ZAPLACENO
  NEZAPLACENO
  BEZ_ZALOHY
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  CANCELLED
  EXPIRED
}

enum PaymentStatus {
  PENDING
  PAID
  CANCELLED
  AUTHORIZED
}

model Invoice {
  id            String   @id @default(cuid())
  invoiceNumber String   @unique
  sequence      Int
  year          Int
  customerName  String?
  customerEmail String?   
  amount        Decimal  @db.Decimal(15, 5)
  currency      String   @default("CZK")
  status        InvoiceStatus @default(PENDING)
  issuedAt      DateTime @default(now())
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  paymentId     String
  payment       Payment  @relation(fields: [paymentId], references: [id])

  @@unique([year, sequence]) // ensures unique sequence per year
}

enum InvoiceStatus {
  PENDING
  PAID
  CANCELED
}