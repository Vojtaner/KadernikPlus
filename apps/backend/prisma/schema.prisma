// prisma/schema.prisma

// Datasource definition: Specifies the database type and connection URL.
datasource db {
  provider          = "mysql" // Or "postgresql", "sqlite" depending on your actual DB
  url               = env("DATABASE_URL")
  // Explicitly define the shadow database URL for migrations
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// Generator definition: Tells Prisma to generate the Prisma Client for Node.js.
generator client {
  provider = "prisma-client-js"
  // CORRECTED OUTPUT PATH:
  // This path is relative from the 'prisma' directory (where schema.prisma is).
  // It goes up one level (..) to 'KadernikPlus/', then down into 'apps/backend/node_modules/@prisma/client'.
}

/// User who performs visits and manages stock allowances (e.g., a hairdresser)
model User {
  id          String  @id @default(uuid())
  name        String
  email       String  @unique
  bankAccount String?

  authProvider String?   @map("auth_provider")
  createdAt    DateTime  @default(now())
  lastLogin    DateTime? @map("last_login")

  services        Service[]
  visits          Visit[]
  ownedStocks     Stock[]          @relation("OwnedStocks")
  stockAllowances StockAllowance[]
  clients         Client[]

  teamMemberships TeamMember[]
  LogEntry        LogEntry[]

  @@map("users")
}

model TeamMember {
  id     String @id @default(uuid())
  teamId String
  userId String @unique

  canAccessStocks  Boolean @default(false)
  canAccessClients Boolean @default(false)
  canAccessVisits  Boolean @default(false)

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])

  @@unique([teamId, userId])
}

enum DepositStatus {
  ZAPLACENO // deposit paid
  NEZAPLACENO // deposit not paid
  BEZ_ZALOHY // deposit should not be paid
}

model Team {
  id   String @id @default(uuid())
  name String

  members  TeamMember[]
  clients  Client[]
  visits   Visit[]
  stocks   Stock[]
  services Service[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  LogEntry       LogEntry[]
  StockAllowance StockAllowance[]
}

/// Junction table for the many-to-many relationship between Visit and Service
model VisitService {
  id        String @id @default(uuid()) // Unique identifier for this entry (UUID)
  visitId   String @map("visit_id") // Foreign key to Visit
  serviceId String @map("service_id") // Foreign key to Service

  visit   Visit   @relation(fields: [visitId], references: [id])
  service Service @relation(fields: [serviceId], references: [id])

  @@unique([visitId, serviceId])
  @@map("visit_services")
}

/// Photos related to a specific visit
model Photo {
  id          String   @id @default(uuid()) // Unique identifier for the photo (UUID)
  visitId     String   @map("visit_id") // Foreign key to Visit
  url         String
  uploadedAt  DateTime @default(now()) @map("uploaded_at")
  description String?

  visit Visit @relation(fields: [visitId], references: [id])

  @@map("photos")
}

model Procedure {
  id          String  @id @default(uuid())
  visitId     String  @map("visit_id")
  stepOrder   Int     @map("step_order")
  description String? @db.Text

  stockAllowances StockAllowance[] // <--- více spotřeb na jednu proceduru

  createdAt DateTime @default(now()) @map("created_at")

  visit Visit @relation(fields: [visitId], references: [id])

  @@map("procedures")
}

model LogEntry {
  id         String   @id @default(uuid())
  userId     String // Who did the action
  teamId     String // (Optional if multi-team)
  action     String // e.g. "CREATE_CLIENT", "DELETE_STOCK_ITEM"
  entityType String // e.g. "client", "stockItem", etc.
  entityId   String? // e.g. "abc-123" if available
  message    String // Human-readable e.g. "Added client John Doe"
  metadata   Json? // Optional, for before/after values or extras
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
  team Team @relation(fields: [teamId], references: [id])
}

model StockItem {
  id           String  @id @default(uuid())
  itemName     String
  unit         String
  packageCount Decimal @db.Decimal(10, 2)

  quantity            Decimal @db.Decimal(10, 2)
  lastPackageQuantity Decimal @db.Decimal(15, 5)

  totalPrice   Decimal @db.Decimal(15, 5)
  avgUnitPrice Decimal @db.Decimal(15, 5)

  threshold Decimal  @db.Decimal(10, 2)
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stockId String
  stock   Stock  @relation(fields: [stockId], references: [id])

  stockAllowances StockAllowance[]

  @@unique([stockId, itemName, isActive])
  @@map("stock_items")
}

model StockAllowance {
  id     String @id @default(uuid())
  userId String @map("user_id")
  teamId String @map("team_id")

  stockItemId String @map("stock_item_id")

  procedureId String    @map("procedure_id")
  procedure   Procedure @relation(fields: [procedureId], references: [id])

  quantity  Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now()) @map("created_at")

  user      User      @relation(fields: [userId], references: [id])
  stockItem StockItem @relation(fields: [stockItemId], references: [id])
  team      Team      @relation(fields: [teamId], references: [id])

  @@map("stock_allowances")
}

model Client {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  phone     String? @unique
  deposit   Boolean @default(true)
  note      String? @db.Text
  visits    Visit[]
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  @@fulltext([firstName, lastName, phone])
  @@map("clients")
}

model Visit {
  id            String         @id @default(uuid())
  clientId      String
  userId        String
  date          DateTime
  note          String?
  deposit       Int?
  depositStatus DepositStatus? @default(NEZAPLACENO)
  visitStatus   Boolean?
  paidPrice     Decimal?       @db.Decimal(10, 2)

  client Client @relation(fields: [clientId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  teamId String
  team   Team   @relation(fields: [teamId], references: [id])

  visitServices VisitService[]
  photos        Photo[]
  procedures    Procedure[]

  @@map("visits")
}

model Stock {
  id        String   @id @default(uuid())
  stockName String
  createdAt DateTime @default(now())
  ownerId   String
  teamId    String? // optional if stock belongs to team

  owner User  @relation("OwnedStocks", fields: [ownerId], references: [id])
  team  Team? @relation(fields: [teamId], references: [id])

  stockItems StockItem[]

  @@map("stocks")
}

model Service {
  id          String  @id @default(uuid())
  serviceName String
  basePrice   Decimal @db.Decimal(10, 2)
  userId      String
  teamId      String? // optional team-wide access

  user User  @relation(fields: [userId], references: [id])
  team Team? @relation(fields: [teamId], references: [id])

  visitServices VisitService[]

  @@unique([userId, serviceName])
  @@map("services")
}
