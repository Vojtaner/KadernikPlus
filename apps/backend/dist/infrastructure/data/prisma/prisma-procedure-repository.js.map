{"version":3,"file":"prisma-procedure-repository.js","sources":["infrastructure/data/prisma/prisma-procedure-repository.ts"],"sourceRoot":"/","sourcesContent":["import { Prisma, PrismaClient, Procedure } from \".prisma/client\";\nimport {\n  ProcedureCreateData,\n  ProcedureRepositoryPort,\n} from \"../../../application/ports/procedure-repository\";\nimport prisma from \"./prisma\";\n\nexport const fullProcedureInclude = Prisma.validator<Prisma.ProcedureInclude>()(\n  {\n    stockAllowances: {\n      include: {\n        stockItem: true,\n      },\n    },\n  }\n);\n\nexport type FullProcedure = Prisma.ProcedureGetPayload<{\n  include: typeof fullProcedureInclude;\n}>;\n\nconst createProcedureRepositoryDb = (\n  prisma: PrismaClient\n): ProcedureRepositoryPort => ({\n  findByVisitId: async (visitId: string) => {\n    return prisma.procedure.findMany({\n      where: { visitId },\n      orderBy: { stepOrder: \"asc\" },\n      include: { stockAllowances: { include: { stockItem: true } } },\n    });\n  },\n\n  addOrUpdate: async (data: ProcedureCreateData) => {\n    const { id, userId, visitId, description, stockAllowances = [] } = data;\n\n    const computeStepOrder = async () => {\n      const lastStep = await prisma.procedure.findFirst({\n        where: { visitId },\n        orderBy: { stepOrder: \"desc\" },\n      });\n      return lastStep ? lastStep.stepOrder + 1 : 1;\n    };\n\n    const teamMember = await prisma.teamMember.findFirst({ where: { userId } });\n\n    if (!teamMember) {\n      throw new Error(\"Nepodařilo se identifikovat váš team.\");\n    }\n\n    if (id) {\n      const existing = await prisma.procedure.findUnique({\n        where: { id },\n        include: { stockAllowances: true },\n      });\n\n      if (!existing) {\n        throw new Error(\"Procedura nenalezena.\");\n      }\n\n      const existingIds = new Set(existing.stockAllowances.map((s) => s.id));\n      const incomingIds = new Set(\n        stockAllowances.map((s) => s.stockAllowanceId).filter(Boolean)\n      );\n\n      const toCreate = stockAllowances.filter((s) => !s.stockAllowanceId);\n      const toUpdate = stockAllowances.filter(\n        (s) => s.stockAllowanceId && existingIds.has(s.stockAllowanceId)\n      );\n      const toDelete = [...existingIds].filter((id) => !incomingIds.has(id));\n\n      return prisma.$transaction(async (tx) => {\n        const updated = await tx.procedure.update({\n          where: { id },\n          data: {\n            description,\n            visit: { connect: { id: visitId } },\n            stockAllowances: {\n              deleteMany: { id: { in: toDelete } },\n              update: toUpdate.map((s) => ({\n                where: { id: s.stockAllowanceId! },\n                data: {\n                  stockItemId: s.stockItemId,\n                  quantity: s.quantity,\n                },\n              })),\n              create: toCreate.map((s) => ({\n                stockItemId: s.stockItemId,\n                quantity: s.quantity,\n                userId,\n                teamId: teamMember.teamId,\n              })),\n            },\n          },\n          include: { stockAllowances: { include: { stockItem: true } } },\n        });\n\n        // Handle stock restore for deleted allowances\n        if (toDelete.length > 0) {\n          const deletedItems = existing.stockAllowances.filter((sa) =>\n            toDelete.includes(sa.id)\n          );\n\n          await Promise.all(\n            deletedItems.map(async (item) => {\n              await adjustStockItem(\n                tx,\n                item.stockItemId,\n                Number(item.quantity)\n              );\n            })\n          );\n        }\n\n        // Handle stock adjust for updated allowances\n        if (toUpdate.length > 0) {\n          await Promise.all(\n            toUpdate.map(async (item) => {\n              const prev = existing.stockAllowances.find(\n                (sa) => sa.id === item.stockAllowanceId\n              );\n              if (!prev) return;\n\n              // if stockItem changed\n              if (prev.stockItemId !== item.stockItemId) {\n                // restore old stock\n                await adjustStockItem(\n                  tx,\n                  prev.stockItemId,\n                  Number(prev.quantity)\n                );\n                // decrement new stock\n                await adjustStockItem(tx, item.stockItemId, -item.quantity);\n              } else {\n                // same stockItem → adjust by delta\n                const diff = item.quantity - Number(prev.quantity);\n                if (diff !== 0) {\n                  // use adjustStockItem with quantity delta\n                  await adjustStockItem(tx, item.stockItemId, diff);\n                }\n              }\n            })\n          );\n        }\n\n        // Handle stock decrement for newly created allowances\n        if (toCreate.length > 0) {\n          await Promise.all(\n            toCreate.map(async (item) => {\n              await adjustStockItem(tx, item.stockItemId, -item.quantity);\n            })\n          );\n        }\n\n        return updated;\n      });\n    }\n\n    const stepOrder = await computeStepOrder();\n\n    return prisma.$transaction(async (tx) => {\n      const created = await tx.procedure.create({\n        data: {\n          description,\n          stepOrder,\n          visit: { connect: { id: visitId } },\n          stockAllowances: {\n            create: stockAllowances.map((s) => ({\n              stockItemId: s.stockItemId,\n              quantity: s.quantity,\n              userId,\n              teamId: teamMember.teamId,\n            })),\n          },\n        },\n        include: { stockAllowances: { include: { stockItem: true } } },\n      });\n\n      if (stockAllowances.length > 0) {\n        await Promise.all(\n          stockAllowances.map(async (item) => {\n            await adjustStockItem(tx, item.stockItemId, -Number(item.quantity));\n          })\n        );\n      }\n\n      return created;\n    });\n  },\n\n  delete: async (id: string) => {\n    await prisma.$transaction(async (tx) => {\n      const existing = await tx.procedure.findUnique({\n        where: { id },\n        include: { stockAllowances: true },\n      });\n\n      if (!existing) {\n        throw new Error(\"Procedura nenalezena.\");\n      }\n\n      // Restore stock quantities and packageCount\n      if (existing.stockAllowances.length > 0) {\n        await Promise.all(\n          existing.stockAllowances.map(async (item) => {\n            await adjustStockItem(tx, item.stockItemId, Number(item.quantity));\n          })\n        );\n      }\n\n      await tx.stockAllowance.deleteMany({\n        where: { procedureId: id },\n      });\n\n      return tx.procedure.delete({\n        where: { id },\n      });\n    });\n\n    return id;\n  },\n});\n\nconst procedureRepositoryDb = createProcedureRepositoryDb(prisma);\nexport default procedureRepositoryDb;\n\nasync function adjustStockItem(\n  tx: Prisma.TransactionClient,\n  stockItemId: string,\n  quantityDelta: number\n) {\n  const stockItem = await tx.stockItem.findUnique({\n    where: { id: stockItemId },\n    select: { quantity: true, totalPrice: true, packageCount: true },\n  });\n\n  if (!stockItem) throw new Error(`Stock item ${stockItemId} not found`);\n\n  const oldQuantity = Number(stockItem.quantity);\n  const oldTotalPrice = Number(stockItem.totalPrice);\n  const oldPackageCount = Number(stockItem.packageCount);\n\n  const oldUnitPrice = oldQuantity > 0 ? oldTotalPrice / oldQuantity : 0;\n\n  const newQuantity = oldQuantity + quantityDelta;\n  const priceDelta = oldUnitPrice * quantityDelta;\n  const packageDelta =\n    oldQuantity > 0\n      ? (oldPackageCount * newQuantity) / oldQuantity - oldPackageCount\n      : 0;\n  const newTotalPrice = oldTotalPrice + priceDelta;\n  const newAvgUnitPrice = newQuantity > 0 ? newTotalPrice / newQuantity : 0;\n\n  await tx.stockItem.update({\n    where: { id: stockItemId },\n    data: {\n      quantity: { increment: quantityDelta },\n      totalPrice: { increment: priceDelta },\n      packageCount: { increment: packageDelta },\n      avgUnitPrice: new Prisma.Decimal(newAvgUnitPrice),\n    },\n  });\n\n  // Optional: check consistency\n  const updated = await tx.stockItem.findUnique({ where: { id: stockItemId } });\n  if (!updated || Number(updated.quantity) < 0)\n    throw new Error(`Stock item ${stockItemId} quantity negative!`);\n}\n"],"names":[],"mappings":"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","debug_id":"ffcbc150-e430-5b26-a3ee-3440e1299033"}