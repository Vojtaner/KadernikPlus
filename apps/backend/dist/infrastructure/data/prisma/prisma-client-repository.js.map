{"version":3,"file":"prisma-client-repository.js","sources":["infrastructure/data/prisma/prisma-client-repository.ts"],"sourceRoot":"/","sourcesContent":["import { ClientOrUpdateCreateData } from \"../../../entities/client\";\nimport { ClientRepositoryPort } from \"../../../application/ports/client-repository\";\nimport { Client, PrismaClient } from \"@prisma/client\";\nimport prisma from \"./prisma\";\nimport {\n  ClientWithVisits,\n  ClientWithVisitsAndServices,\n} from \"../../../infrastructure/mappers/client-mapper\";\nimport { WithUserId } from \"../../../entities/user\";\nimport { httpError } from \"../../../adapters/express/httpError\";\n\nconst createClientRepositoryDb = (\n  prismaRepository: PrismaClient\n): ClientRepositoryPort => {\n  return {\n    findAll: async (userId: string): Promise<Client[]> => {\n      const teamMember = await prismaRepository.teamMember.findFirst({\n        where: {\n          userId,\n        },\n      });\n\n      const conditions: Record<string, number | string>[] = [{ userId }];\n\n      if (teamMember?.canAccessClients && teamMember.teamId) {\n        conditions.push({ teamId: teamMember.teamId });\n      }\n\n      const clients = await prismaRepository.client.findMany({\n        where: { AND: conditions },\n      });\n\n      return clients;\n    },\n    search: async (\n      teamId: string,\n      query: string,\n      userId: string\n    ): Promise<ClientWithVisitsAndServices[]> => {\n      const teamMember = await prismaRepository.teamMember.findFirst({\n        where: {\n          userId,\n        },\n      });\n\n      const conditions: Record<string, number | string | { search: string }>[] =\n        [\n          {\n            userId,\n            firstName: {\n              search: query,\n            },\n            lastName: {\n              search: query,\n            },\n            phone: {\n              search: query,\n            },\n          },\n        ];\n\n      if (teamMember?.canAccessClients && teamMember.teamId) {\n        conditions.push({ teamId });\n      }\n\n      const clients = await prismaRepository.client.findMany({\n        where: { AND: conditions },\n        include: {\n          visits: {\n            include: { visitServices: { include: { service: true } } },\n          },\n        },\n      });\n\n      return clients;\n    },\n    addOrUpdate: async (\n      clientData: WithUserId<ClientOrUpdateCreateData>\n    ): Promise<Client> => {\n      const { id: clientId } = clientData;\n\n      if (clientId) {\n        const existingClient = await prismaRepository.client.findFirst({\n          where: {\n            id: clientId,\n          },\n        });\n\n        if (existingClient) {\n          const { userId, id, teamId, ...updateFields } = clientData;\n\n          const updatedClient = await prismaRepository.client.update({\n            where: { id: clientId },\n            data: updateFields,\n          });\n\n          return updatedClient;\n        }\n      }\n\n      const userTeam = await prismaRepository.teamMember.findFirst({\n        where: { userId: clientData.userId },\n      });\n\n      if (!userTeam) {\n        throw new Error(\"Uživatel není v žádném týmu.\");\n      }\n\n      if (!clientData.firstName || !clientData.lastName) {\n        throw new Error(\"Zadejte jméno klienta.\");\n      }\n\n      if (clientData.phone) {\n        const alreadyExistingPhone = await prismaRepository.client.findUnique({\n          where: { phone: clientData.phone },\n        });\n\n        if (alreadyExistingPhone) {\n          throw httpError(\"Zadané telefonní číslo už má jiný klient.\", 409);\n        }\n      }\n\n      const newClient = await prismaRepository.client.create({\n        data: {\n          firstName: clientData.firstName,\n          lastName: clientData.lastName,\n          phone: clientData.phone,\n          note: clientData.note,\n          userId: clientData.userId,\n          deposit: clientData.deposit,\n          teamId: userTeam.teamId,\n        },\n      });\n\n      return newClient;\n    },\n    findById: async (\n      id: string,\n      userId: string\n    ): Promise<ClientWithVisits | null> => {\n      const teamMember = await prismaRepository.teamMember.findFirst({\n        where: { userId },\n      });\n\n      const whereConditions: Record<string, string>[] = [{ id }];\n\n      if (teamMember?.canAccessClients && teamMember.teamId) {\n        whereConditions.push({ teamId: teamMember.teamId });\n      }\n\n      const client = await prismaRepository.client.findFirst({\n        where: { AND: whereConditions },\n        include: { visits: true },\n      });\n\n      if (!client) {\n        throw new Error(\"Klient nebyl nalezen.\");\n      }\n\n      const isOwnClient = !client.teamId;\n      const isTeamClient =\n        client.teamId === teamMember?.teamId && teamMember?.canAccessClients;\n\n      if (isOwnClient || isTeamClient) {\n        return client;\n      }\n\n      throw new Error(\n        \"Klient neexistuje, není ve vašem týmu nebo k němu nemáte oprávnění.\"\n      );\n    },\n\n    findByPhone: async (phone: string): Promise<Client | null> => {\n      const client = await prismaRepository.client.findUnique({\n        where: { phone },\n      });\n\n      return client;\n    },\n  };\n};\n\nconst clientRepositoryDb = createClientRepositoryDb(prisma);\n\nexport default clientRepositoryDb;\n"],"names":[],"mappings":"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","debug_id":"4c5035ca-51e1-5942-a366-9a1d913fc092"}