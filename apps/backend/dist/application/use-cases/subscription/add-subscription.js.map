{"version":3,"file":"add-subscription.js","sources":["application/use-cases/subscription/add-subscription.ts"],"sourceRoot":"/","sourcesContent":["import { Prisma } from \".prisma/client\";\nimport {\n  SubscriptionCreateData,\n  SubscriptionRepositoryPort,\n} from \"../../ports/subscription-repository\";\nimport subscriptionRepositoryDb from \"../../../infrastructure/data/prisma/prisma-subscription-repository\";\nimport createPaymentUseCase, {\n  CreatePaymentUseCaseType,\n} from \"../payment/create-payment\";\nimport comgatePaymentApi, {\n  ComgateCreatePaymentReturnType,\n  ComgatePaymentApiType,\n  generate8DigitNumber,\n} from \"../../services/comgate/comgatePaymentApi\";\nimport { UserRepositoryPort } from \"../../../application/ports/user-repository\";\nimport userRepositoryDb from \"../../../infrastructure/data/prisma/prisma-user-repository\";\nimport { ManagementClient } from \"auth0\";\nimport { auth0ManagementApi } from \"../../../application/services/auth0/auth0ManagementApi\";\nimport updatePaymentUseCase, {\n  UpdatePaymentUseCaseType,\n} from \"../payment/update-payment\";\nimport { WithUserId } from \"@/entities/user\";\n\nexport type PaymentStatus = \"PENDING\" | \"AUTHORIZED\" | \"PAID\" | \"CANCELLED\";\n\nconst createAddSubscriptionUseCase = (dependencies: {\n  subscriptionRepositoryDb: SubscriptionRepositoryPort;\n  userRepositoryDb: UserRepositoryPort;\n  createPaymentUseCase: CreatePaymentUseCaseType;\n  updatePaymentUseCase: UpdatePaymentUseCaseType;\n  comgatePaymentApi: ComgatePaymentApiType;\n  auth0ManagementApi: ManagementClient;\n}) => ({\n  execute: async (\n    data: WithUserId<SubscriptionCreateData>\n  ): Promise<ComgateCreatePaymentReturnType> => {\n    const existingSubscription =\n      await dependencies.subscriptionRepositoryDb.findByUserId(data.userId);\n\n    if (existingSubscription && existingSubscription.status === \"ACTIVE\") {\n      throw new Error(\"Uživatel už má platné členství.\");\n    }\n\n    const user = await dependencies.userRepositoryDb.findById(data.userId);\n\n    if (!user) {\n      throw new Error(\"Uživatele se nepovedlo najít.\");\n    }\n\n    const managementApiData = await dependencies.auth0ManagementApi.users.get({\n      id: data.userId,\n    });\n\n    if (!managementApiData) {\n      throw new Error(\"Nepovedlo se načíst Auth0 data.\");\n    }\n\n    const newSubscription = await dependencies.subscriptionRepositoryDb.add({\n      ...data,\n      status: \"PENDING\",\n    });\n\n    const newPayment = await dependencies.createPaymentUseCase.execute({\n      parentId: \"\",\n      subscriptionId: newSubscription.id,\n      amount: new Prisma.Decimal(data.price),\n      currency: data.currency || \"CZK\",\n      provider: \"comgate\",\n      status: \"PENDING\",\n      refId: generate8DigitNumber(),\n      transactionId: generate8DigitNumber().toString(),\n    });\n\n    const comgatePaymentData =\n      await dependencies.comgatePaymentApi.createPayment({\n        price: Number(newPayment.amount),\n        currency: newPayment.currency,\n        email: user.email,\n        refId: newPayment.refId.toString(),\n        fullName: user.name,\n        label: `Předplatné typu - ${newSubscription.plan}`,\n        phone: managementApiData.data.phone_number,\n      });\n\n    if (comgatePaymentData) {\n      const payment = await dependencies.updatePaymentUseCase.execute(\n        {\n          transactionId: comgatePaymentData.transId,\n        },\n        newPayment.id\n      );\n    }\n\n    return comgatePaymentData;\n  },\n});\n\nexport type AddSubscriptionUseCaseType = ReturnType<\n  typeof createAddSubscriptionUseCase\n>;\n\nconst addSubscriptionUseCase = createAddSubscriptionUseCase({\n  subscriptionRepositoryDb,\n  userRepositoryDb,\n  createPaymentUseCase,\n  comgatePaymentApi,\n  auth0ManagementApi,\n  updatePaymentUseCase,\n});\n\nexport default addSubscriptionUseCase;\n"],"names":[],"mappings":"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","debug_id":"57db84b4-a94c-56df-8eb7-582d1d563296"}